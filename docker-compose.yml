version: "3.9"

services:
  api:
    build:
      context: .
      dockerfile: ./dk/lo/dj/Dockerfile
    command: [ "/start.sh" ]
    volumes:
      - .:/app
      - static_volume:/app/staticfiles
      - media_volume:/app/mediafiles
    expose:
      - "8000"
    env_file:
      - .env
    depends_on:
      - postgres-db
      - redis
    networks:
      - estate-react
  
  client:
    build:
      context: ./client
      dockerfile: ./docker/local/Dockerfile
    restart: on-failure
    volumes:
      - ./client:/app
      - /app/node_modules
    networks:
      - estate-react

  postgres-db:
    image: postgres:12.0-alpine
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    networks:
      - estate-react

  redis:
    image: redis:5-alpine
    networks:
      - estate-react

  celery_worker:
    build:
      context: .
      dockerfile: ./dk/lo/dj/Dockerfile
    command: [ "/start-celeryworker.sh" ]
    volumes:
      - .:/app
    env_file:
      - .env
    depends_on:
      - redis
      - postgres-db
    networks:
      - estate-react

  flower:
    build: 
      context: .
      dockerfile: ./dk/lo/dj/Dockerfile
    command: [ "/start-flower.sh" ]
    volumes:
      - .:/app
    env_file:
      - .env
    ports:
      - "5557:5555"
    depends_on:
      - redis
      - postgres-db
    networks:
      - estate-react
  
  nginx:
    restart: always
    depends_on:
      - api
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/mediafiles
    build:
      context: ./dk/lo/nginx
      dockerfile: Dockerfile
    ports:
      - "8080:80"
    networks:
      - estate-react


networks:
  estate-react:
    driver: bridge

volumes:
  postgres_data:
  static_volume:
  media_volume:
